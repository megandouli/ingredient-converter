{"version":3,"sources":["Components/Paragraph.js","Components/Forms.js","Components/Entries.js","Components/AppBody.js","App.js","serviceWorker.js","index.js"],"names":["Paragraph","className","this","props","text","React","Component","ingredients","name","gramsPerCup","imperialUnits","perCup","metricUnits","perGram","getGramsPerCup","ingredName","find","item","toLowerCase","getPerCup","imperialUnitName","unit","getPerGram","metricUnitName","convertToMetric","grams","metricUnit","Number","isNaN","parseFloat","toFixed","convertImperialToGrams","amt","imperialUnit","AmountInput","label","form","type","onChange","handleChange","value","MenuOption","GenericForm","GenericMenu","options","data-live-search","map","option","key","IngredientMenu","ingredient","ImperialDropdown","units","MetricDropdown","IngredientRow","state","handleIngredientChange","bind","handleImperialUnitChange","handleMetricUnitChange","handleImperialAmtChange","handleMetricAmtChange","changeAmount","imperialValue","metricValue","event","newIngredient","target","setState","newAmtGrams","newAmt","newAmtImperial","oldAmtImperial","console","log","newAmtMetric","oldAmtMetric","onClick","onDelete","id","Entries","handleAdd","allEntries","Date","newEntries","Array","from","push","row","entries","filter","entry","AppBody","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17fd4116.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Paragraph extends React.Component {\n  render() {\n    return (\n      <p className=\"col-md-6 text-justify m-auto pt-3\">{this.props.text}</p>\n    );\n  }\n}\n\nexport default Paragraph;\n","import React from \"react\";\n// import { evaluate } from \"mathjs\";\n\nlet ingredients = [\n  { name: \"\", gramsPerCup: null },\n  { name: \"Baking Powder\", gramsPerCup: 192 },\n  { name: \"Baking Soda\", gramsPerCup: 288 },\n  { name: \"Butter\", gramsPerCup: 227 },\n  { name: \"Buttermilk\", gramsPerCup: 227 },\n  { name: \"Chocolate Chips\", gramsPerCup: 170 },\n  { name: \"Cocoa Powder\", gramsPerCup: 84 },\n  { name: \"Cornstarch\", gramsPerCup: 112 },\n  { name: \"Flour — AP\", gramsPerCup: 120 },\n  { name: \"Flour — Bread\", gramsPerCup: 120 },\n  { name: \"Flour — Cake\", gramsPerCup: 114 },\n  { name: \"Flour — Whole Wheat\", gramsPerCup: 113 },\n  { name: \"Heavy Cream\", gramsPerCup: 227 },\n  { name: \"Honey\", gramsPerCup: 336 },\n  { name: \"Mayonnaise\", gramsPerCup: 220 },\n  { name: \"Milk\", gramsPerCup: 227 },\n  { name: \"Molasses\", gramsPerCup: 322 },\n  { name: \"Olive Oil\", gramsPerCup: 200 },\n  { name: \"Peanut Butter\", gramsPerCup: 270 },\n  { name: \"Salt\", gramsPerCup: 256 },\n  { name: \"Sour Cream\", gramsPerCup: 227 },\n  { name: \"Sugar — White\", gramsPerCup: 200 },\n  { name: \"Sugar — Brown(Packed)\", gramsPerCup: 213 },\n  { name: \"Sugar — Confectioner's\", gramsPerCup: 113 },\n  { name: \"Vegetable Oil\", gramsPerCup: 200 },\n  { name: \"Water\", gramsPerCup: 236.59 },\n  { name: \"Yogurt Plain\", gramsPerCup: 227 }\n];\n\nlet imperialUnits = [\n  { name: \"cups\", perCup: 1 },\n  { name: \"tbs\", perCup: 16 },\n  { name: \"tsp\", perCup: 48 }\n];\n\nlet metricUnits = [\n  { name: \"grams\", perGram: 1 },\n  { name: \"oz.\", perGram: 1 / 28.349523125 }\n];\n\n// returns the grams/Cup for the given ingredient name\nfunction getGramsPerCup(ingredName) {\n  var element = ingredients.find(item => {\n    return item.name.toLowerCase() === ingredName.toLowerCase();\n  });\n\n  return element.gramsPerCup;\n}\n\nfunction getPerCup(imperialUnitName) {\n  var element = imperialUnits.find(unit => {\n    return unit.name.toLowerCase() === imperialUnitName.toLowerCase();\n  });\n\n  return element.perCup;\n}\n\nfunction getPerGram(metricUnitName) {\n  var element = metricUnits.find(unit => {\n    return unit.name.toLowerCase() === metricUnitName.toLowerCase();\n  });\n\n  return element.perGram;\n}\n\n// converts from the given amount in grams into the given metric unit\nfunction convertToMetric(grams, metricUnit) {\n  if (Number.isNaN(parseFloat(grams))) {\n    return grams;\n  } else {\n    return (parseFloat(grams) * getPerGram(metricUnit)).toFixed(3);\n  }\n}\n\n// converts from the given amount in the given metric units into grams\nfunction convertToGrams(amt, metricUnit) {\n  if (Number.isNaN(parseFloat(amt))) {\n    return amt;\n  } else {\n    return (amt / getPerGram(metricUnit)).toFixed(3);\n  }\n}\n\n// returns the given amount (in grams) in its equivalent amount in the given imperial unit\n// for the given ingredient name\nfunction convertToImperial(grams, imperialUnit, ingredName) {\n  if (Number.isNaN(parseFloat(grams))) {\n    return grams;\n  } else {\n    var asCups = grams / getGramsPerCup(ingredName);\n    var result = asCups * getPerCup(imperialUnit);\n    return result.toFixed(3);\n  }\n}\n\n// converts from the given amount of the given ingredient in the given imperial unit\n// into grams\nfunction convertImperialToGrams(amt, ingredName, imperialUnit) {\n  if (Number.isNaN(parseFloat(amt))) {\n    return amt;\n  } else {\n    var asCups = amt / getPerCup(imperialUnit);\n    var result = asCups * getGramsPerCup(ingredName);\n    return result.toFixed(3);\n  }\n}\n\nclass AmountInput extends React.Component {\n  render() {\n    return (\n      <GenericForm\n        label=\"Amount:\"\n        form={\n          <input\n            type=\"text\"\n            onChange={this.props.handleChange}\n            value={this.props.value}\n            className=\"form-control amount-input\"\n          />\n        }\n      />\n    );\n  }\n}\n\nclass MenuOption extends React.Component {\n  render() {\n    let value = this.props.name.toLowerCase();\n    return <option value={value}>{this.props.name}</option>;\n  }\n}\n\nclass GenericForm extends React.Component {\n  render() {\n    return (\n      <div className=\"m-auto mt-4 pt-4 generic-form col\">\n        <label>\n          {this.props.label}\n          <br />\n          {this.props.form}\n        </label>\n      </div>\n    );\n  }\n}\n\nclass GenericMenu extends React.Component {\n  render() {\n    let options = this.props.options;\n    return (\n      <GenericForm\n        label={this.props.label}\n        form={\n          <select\n            data-live-search=\"true\"\n            onChange={this.props.handleChange}\n            value={this.props.value}\n            className={\"select-menu \" + this.props.className}\n          >\n            {options.map(option => {\n              return <MenuOption key={option} name={option} />;\n            })}\n          </select>\n        }\n      />\n    );\n  }\n}\n\nclass IngredientMenu extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ingredients = ingredients.map(ingredient => {\n      return ingredient.name;\n    });\n  }\n\n  render() {\n    return (\n      <GenericMenu\n        label=\"Ingredients:\"\n        value={this.props.value}\n        handleChange={this.props.handleChange}\n        options={this.ingredients}\n        className=\"ingredient-menu col-md-8\"\n      />\n    );\n  }\n}\n\nclass ImperialDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.units = imperialUnits.map(unit => {\n      return unit.name;\n    });\n  }\n  render() {\n    return (\n      <GenericMenu\n        label=\"Units:\"\n        value={this.props.value}\n        handleChange={this.props.handleChange}\n        options={this.units}\n        className=\"imperial-menu\"\n      />\n    );\n  }\n}\n\nclass MetricDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n    this.units = metricUnits.map(unit => {\n      return unit.name;\n    });\n  }\n  render() {\n    return (\n      <GenericMenu\n        label=\"Units:\"\n        value={this.props.value}\n        handleChange={this.props.handleChange}\n        options={this.units}\n        className=\"metric-menu\"\n      />\n    );\n  }\n}\n\nclass IngredientRow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ingredient: \"\",\n      amt: \"0\", // in grams\n      imperialUnit: \"cups\",\n      metricUnit: \"grams\"\n    };\n    this.handleIngredientChange = this.handleIngredientChange.bind(this);\n    this.handleImperialUnitChange = this.handleImperialUnitChange.bind(this);\n    this.handleMetricUnitChange = this.handleMetricUnitChange.bind(this);\n    this.handleImperialAmtChange = this.handleImperialAmtChange.bind(this);\n    this.handleMetricAmtChange = this.handleMetricAmtChange.bind(this);\n    this.changeAmount = this.changeAmount.bind(this);\n    this.imperialValue = \"0\";\n    this.metricValue = \"0\";\n  }\n\n  handleIngredientChange(event) {\n    let newIngredient = event.target.value;\n    this.setState({ ingredient: newIngredient });\n    if (newIngredient === \"\") {\n      this.changeAmount(0);\n    } else {\n      let oldAmtCups = this.imperialValue / getPerCup(this.state.imperialUnit);\n      let newAmtGrams = convertImperialToGrams(\n        oldAmtCups,\n        newIngredient,\n        \"cups\"\n      );\n      this.changeAmount(newAmtGrams);\n    }\n  }\n\n  handleImperialUnitChange(event) {\n    this.setState({ imperialUnit: event.target.value });\n    let asCups = this.imperialValue / getPerCup(event.target.value);\n    let newAmtGrams = convertImperialToGrams(\n      asCups,\n      this.state.ingredient,\n      \"cups\"\n    );\n    this.changeAmount(newAmtGrams);\n  }\n\n  handleMetricUnitChange(event) {\n    this.setState({ metricUnit: event.target.value });\n    this.metricValue = convertToMetric(this.state.amt, event.target.value);\n  }\n\n  handleImperialAmtChange(event) {\n    let newAmt = convertImperialToGrams(\n      event.target.value,\n      this.state.ingredient,\n      this.state.imperialUnit\n    );\n    this.imperialValue = event.target.value;\n    this.changeAmount(newAmt);\n  }\n\n  handleMetricAmtChange(event) {\n    let newAmt = convertToGrams(event.target.value, this.state.metricUnit);\n    this.metricValue = event.target.value;\n    this.changeAmount(newAmt);\n  }\n\n  changeAmount(newAmt) {\n    this.setState(state => {\n      let newAmtImperial = convertToImperial(\n        newAmt,\n        state.imperialUnit,\n        state.ingredient\n      );\n      let oldAmtImperial = this.imperialValue;\n      if (parseFloat(newAmtImperial) !== parseFloat(oldAmtImperial)) {\n        this.imperialValue = Number.isNaN(parseFloat(newAmtImperial))\n          ? oldAmtImperial\n          : parseFloat(newAmtImperial);\n        console.log(\"imperial amt after: \" + this.imperialValue);\n      }\n      let newAmtMetric = convertToMetric(newAmt, state.metricUnit);\n\n      let oldAmtMetric = this.metricValue;\n\n      if (parseFloat(newAmtMetric) !== parseFloat(oldAmtMetric)) {\n        this.metricValue = Number.isNaN(parseFloat(newAmtMetric))\n          ? oldAmtMetric\n          : parseFloat(newAmtMetric);\n      }\n      return { amt: newAmt };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"form-row m-auto\">\n        <IngredientMenu\n          handleChange={this.handleIngredientChange}\n          value={this.state.ingredient}\n        />\n        <div className=\"form-row m-0\">\n          <div className=\"form-row m-0\">\n            <AmountInput\n              handleChange={this.handleImperialAmtChange}\n              value={this.imperialValue}\n            />\n            <ImperialDropdown\n              handleChange={this.handleImperialUnitChange}\n              value={this.state.imperialUnit}\n            />\n          </div>\n          <div className=\"form-row m-0\">\n            <AmountInput\n              handleChange={this.handleMetricAmtChange}\n              value={this.metricValue}\n            />\n            <MetricDropdown\n              handleChange={this.handleMetricUnitChange}\n              value={this.state.metricUnit}\n            />\n            <button\n              onClick={() => this.props.onDelete(this.props.id)}\n              className=\"remove-button mb-5\"\n            >\n              <i className=\"fa fa-trash\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default IngredientRow;\n","import React from \"react\";\nimport IngredientRow from \"./Forms\";\n\nclass Entries extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleAdd = this.handleAdd.bind(this);\n    this.onDelete = this.onDelete.bind(this);\n    this.state = { allEntries: [new Date()] };\n  }\n\n  handleAdd() {\n    let newEntries = Array.from(this.state.allEntries);\n    newEntries.push(new Date());\n    this.setState({\n      allEntries: newEntries\n    });\n  }\n\n  onDelete(row) {\n    const entries = Array.from(this.state.allEntries).filter(entry => {\n      return row !== entry;\n    });\n    this.setState({ allEntries: entries });\n  }\n\n  render() {\n    let entries = Array.from(this.state.allEntries);\n    return (\n      <div className=\"entries col-md-6 m-auto\">\n        {entries.map(entry => {\n          return (\n            <IngredientRow key={entry} id={entry} onDelete={this.onDelete} />\n          );\n        })}\n        <button className=\"p-2 mt-5\" id=\"add-button\" onClick={this.handleAdd}>\n          Add Item\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Entries;\n","import React from \"react\";\nimport Paragraph from \"./Paragraph.js\";\nimport Entries from \"./Entries.js\";\n\nclass AppBody extends React.Component {\n  render() {\n    return (\n      <div className=\"App-body pt-4 pb-3 pl-2 pr-2\">\n        <Paragraph\n          text=\"Measuring ingredients by weight is by far the most precise way of\n          determining how much of something should be used in a recipe. However,\n          the majority of recipes in the US are not in the metric system and\n          constantly having to figure how much 1 c. of flour weighs can be a\n          pain. This app is here to help you convert your common baking\n          ingredients into the metric system!\"\n        />\n        <Entries />\n      </div>\n    );\n  }\n}\n\nexport default AppBody;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport AppBody from \"./Components/AppBody.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header m-0 p-4\">\n        <h1>Ingredient Converter</h1>\n      </header>\n      <div className=\"container-fluid\">\n        <AppBody />\n      </div>\n      <div className=\"App-footer\">\n        <p className=\"col-md-6 m-auto p-4\">\n          Note: conversions are approximate because ingredients from different\n          brands vary in density. Conversion rates taken from\n          https://www.thecalculatorsite.com/cooking/cups-grams.php and\n          https://www.kingarthurflour.com/learn/ingredient-weight-chart.\"\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}